type Users @aws_cognito_user_pools @aws_iam {
  userId: String!
  profileOwner: String
  name: String
  email: String
  createdAt: String
  updatedAt: String
  messagingChannel: String
  owner: String
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUsersConnection @aws_cognito_user_pools @aws_iam {
  items: [Users]!
  nextToken: String
}

input ModelUsersFilterInput {
  userId: ModelStringInput
  profileOwner: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  messagingChannel: ModelStringInput
  id: ModelIDInput
  and: [ModelUsersFilterInput]
  or: [ModelUsersFilterInput]
  not: ModelUsersFilterInput
  owner: ModelStringInput
}

type Query {
  getUsers(userId: String!): Users @aws_cognito_user_pools @aws_iam
  listUsers(userId: String, filter: ModelUsersFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUsersConnection @aws_cognito_user_pools @aws_iam
}

input ModelUsersConditionInput {
  profileOwner: ModelStringInput
  name: ModelStringInput
  email: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  messagingChannel: ModelStringInput
  and: [ModelUsersConditionInput]
  or: [ModelUsersConditionInput]
  not: ModelUsersConditionInput
  owner: ModelStringInput
}

input CreateUsersInput {
  userId: String!
  profileOwner: String
  name: String
  email: String
  createdAt: String
  updatedAt: String
  messagingChannel: String
}

input UpdateUsersInput {
  userId: String!
  profileOwner: String
  name: String
  email: String
  createdAt: String
  updatedAt: String
  messagingChannel: String
}

input DeleteUsersInput {
  userId: String!
}

type Mutation {
  createUsers(input: CreateUsersInput!, condition: ModelUsersConditionInput): Users @aws_cognito_user_pools @aws_iam
  updateUsers(input: UpdateUsersInput!, condition: ModelUsersConditionInput): Users @aws_cognito_user_pools @aws_iam
  deleteUsers(input: DeleteUsersInput!, condition: ModelUsersConditionInput): Users @aws_cognito_user_pools @aws_iam
}

input ModelSubscriptionUsersFilterInput {
  userId: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  messagingChannel: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  and: [ModelSubscriptionUsersFilterInput]
  or: [ModelSubscriptionUsersFilterInput]
  owner: ModelStringInput
  profileOwner: ModelStringInput
}

type Subscription {
  onCreateUsers(filter: ModelSubscriptionUsersFilterInput, owner: String, profileOwner: String): Users @aws_subscribe(mutations: ["createUsers"]) @aws_cognito_user_pools @aws_iam
  onUpdateUsers(filter: ModelSubscriptionUsersFilterInput, owner: String, profileOwner: String): Users @aws_subscribe(mutations: ["updateUsers"]) @aws_cognito_user_pools @aws_iam
  onDeleteUsers(filter: ModelSubscriptionUsersFilterInput, owner: String, profileOwner: String): Users @aws_subscribe(mutations: ["deleteUsers"]) @aws_cognito_user_pools @aws_iam
}
